/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: á—©á’ªEá™­. Ká—©.ðŸš— (https://sketchfab.com/Alex.Ka.)
License: CC-BY-NC-ND-4.0 (http://creativecommons.org/licenses/by-nc-nd/4.0/)
Source: https://sketchfab.com/3d-models/bmw-m6-gt3-2018-1cee0ef3cad2441b9972b8ba84fe0865
Title: BMW M6 GT3 2018 ðŸ’›
conversions from .glb done on gltf.pmnd.rs
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import Model from "../assets/bmw.glb";
import { a } from "@react-spring/three";
// import { isRotating } from "../pages/Home";

//Note: when attempting to render a .glb file, you must add the following configurations to the
//vite.config.js file: export default defineConfig({
//   plugins: [react()],
//   assetsInclude: ["**/*.glb"],
// });

const Car = (props) => {
  const { screenPosition, screenScale, rotation, isRotating, setIsRotating } =
    props;
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(Model);
  const carRef = useRef();
  console.log(isRotating);
  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.6;

  const handlePointerDown = (e) => {
    // e for event: ie. event.touches / event.mousedown/ something like that
    // stopProgation will stop the mouse(pointer) click from propagating/bubbling through to other elements of the scree
    // besides this element.
    e.stopPropagation();
    e.preventDefault();
    //ie. a default function that reloads the page
    setIsRotating(true);
    // figures out what type of touch it is - like from mobile or mouse and desktop
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;

    lastX.current = clientX; //sets the useRef hook to the updated value of mousedown position
  };
  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };
  //handlePointerMove should only be called while the scene is rotating
  // it does the same thing as handlePointerUp, so we pass the event into handlePointerUp
  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      //calculate change in horizontal position: position of mouse on mouseUp - position of mouse on mouseDown which is stored in lastX.current
      // using useRef() divided by viewport.width
      const delta = (clientX - lastX.current) / viewport.width;
      //now update Car's rotation based on the position of the mouse - use Math.PI because working with a circle
      carRef.current.rotation.y += delta * 0.01 * Math.PI;
      //now update the lastX value
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };
  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) {
        setIsRotating(true);
      }
      carRef.current.rotation.y += 0.01 * Math.PI;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) {
        setIsRotating(true);
      }
      carRef.current.rotation.y -= 0.01 * Math.PI;
    }
  };

  const handleKeyUp = (e) => {
    if (e.key === "ArrowRight" || "ArrowLeft") {
      setIsRotating(false);
    }
  };

  //put the functions to action using a useFrame function/hook - it accepts a callback function that executes
  // on every single frame
  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor; //if not rotating, damping will make rotation smoother
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }
      carRef.current.rotation.y += rotationSpeed.current;
    } else {
      const rotation = carRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation
      //   switch (true) {
      //     case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
      //       setCurrentStage(4);
      //       break;
      //     case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
      //       setCurrentStage(3);
      //       break;
      //     case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
      //       setCurrentStage(2);
      //       break;
      //     case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
      //       setCurrentStage(1);
      //       break;
      //     default:
      //       setCurrentStage(null);
      //   }
    }
  });
  //Now for the execution of these functions in a useEffect hook

  useEffect(() => {
    //This attaches the eventListeners to the canvas DOM - when we click the scene, we aren't touching the regular
    //DOM, but the canvas instead
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, [
    gl,
    handlePointerDown,
    handlePointerMove,
    handlePointerUp,
    handleKeyUp,
    handleKeyDown,
  ]);

  return (
    <a.group {...props} ref={carRef} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1.08696}>
        <mesh geometry={nodes.Object_2.geometry} material={materials.BADGES} />
        <mesh
          geometry={nodes.Object_3.geometry}
          material={materials.BLACKCHROME}
        />
        <mesh
          geometry={nodes.Object_4.geometry}
          material={materials.BLACKPLASTIC}
        />
        <mesh geometry={nodes.Object_5.geometry} material={materials.BLUERED} />
        <mesh
          geometry={nodes.Object_6.geometry}
          material={materials.BMW_M6_GT3_by_Alex_Ka}
        />
        <mesh geometry={nodes.Object_7.geometry} material={materials.BOTTOM} />
        <mesh
          geometry={nodes.Object_8.geometry}
          material={materials.BRAKEDISC}
        />
        <mesh
          geometry={nodes.Object_9.geometry}
          material={materials.BRAKELIGHT}
        />
        <mesh geometry={nodes.Object_10.geometry} material={materials.CHROME} />
        <mesh
          geometry={nodes.Object_11.geometry}
          material={materials.DETAILS}
        />
        <mesh geometry={nodes.Object_12.geometry} material={materials.EMBLEM} />
        <mesh
          geometry={nodes.Object_13.geometry}
          material={materials.FOFLIGHT}
        />
        <mesh
          geometry={nodes.Object_14.geometry}
          material={materials.FUELcap}
        />
        <mesh geometry={nodes.Object_15.geometry} material={materials.GRILL} />
        <mesh
          geometry={nodes.Object_16.geometry}
          material={materials.HEADLIGHT}
        />
        <mesh
          geometry={nodes.Object_17.geometry}
          material={materials.INTERIOR}
        />
        <mesh
          geometry={nodes.Object_18.geometry}
          material={materials.material}
        />
        <mesh
          geometry={nodes.Object_19.geometry}
          material={materials.RADIATORfront}
        />
        <mesh
          geometry={nodes.Object_20.geometry}
          material={materials.material_18}
        />
        <mesh
          geometry={nodes.Object_21.geometry}
          material={materials.SPOILER}
        />
        <mesh
          geometry={nodes.Object_22.geometry}
          material={materials.SUPORT1}
        />
        <mesh
          geometry={nodes.Object_23.geometry}
          material={materials.WINDOWS}
        />
        <mesh
          geometry={nodes.Object_24.geometry}
          material={materials.WINDOWrear}
        />
        <mesh
          geometry={nodes.Object_25.geometry}
          material={materials.blackaluminium}
        />
        <mesh
          geometry={nodes.Object_26.geometry}
          material={materials.blackmatte}
        />
        <mesh
          geometry={nodes.Object_27.geometry}
          material={materials.brakelightsglass}
        />
        <mesh
          geometry={nodes.Object_28.geometry}
          material={materials.carshadow}
        />
        <mesh geometry={nodes.Object_29.geometry} material={materials.decal} />
        <mesh
          geometry={nodes.Object_30.geometry}
          material={materials.detailplastic}
        />
        <mesh
          geometry={nodes.Object_31.geometry}
          material={materials.detailsmatte}
        />
        <mesh
          geometry={nodes.Object_32.geometry}
          material={materials.exhausthole}
        />
        <mesh geometry={nodes.Object_33.geometry} material={materials.floor} />
        <mesh
          geometry={nodes.Object_34.geometry}
          material={materials.fogglass}
        />
        <mesh
          geometry={nodes.Object_35.geometry}
          material={materials.headlightsglass}
        />
        <mesh
          geometry={nodes.Object_36.geometry}
          material={materials.lllllll}
        />
        <mesh
          geometry={nodes.Object_37.geometry}
          material={materials.mirrorinterior}
        />
        <mesh
          geometry={nodes.Object_38.geometry}
          material={materials.mirrors}
        />
        <mesh geometry={nodes.Object_39.geometry} material={materials.plate} />
        <mesh
          geometry={nodes.Object_40.geometry}
          material={materials.supportlogo}
        />
        <mesh geometry={nodes.Object_41.geometry} material={materials.tire} />
      </group>
    </a.group>
  );
};

export default Car;
